<?xml version='1.1' encoding='UTF-8'?>
<flow-build plugin="workflow-job@1341.vd9fa_65f771dd">
  <actions>
    <hudson.model.CauseAction>
      <causeBag class="linked-hash-map">
        <entry>
          <hudson.model.Cause_-UserIdCause>
            <userId>admin</userId>
          </hudson.model.Cause_-UserIdCause>
          <int>1</int>
        </entry>
      </causeBag>
    </hudson.model.CauseAction>
    <org.jenkinsci.plugins.workflow.libs.LibrariesAction plugin="pipeline-groovy-lib@671.v07c339c842e8">
      <libraries/>
    </org.jenkinsci.plugins.workflow.libs.LibrariesAction>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <stagesUUID>a12f9536-3eec-4781-8a21-530b7a3cbda1</stagesUUID>
      <pipelineDefs>
        <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef plugin="pipeline-model-api@2.2144.v077a_d1928a_40">
          <stages>
            <stages>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>git</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">git branch: &apos;wip&apos;, url: &apos;https://github.com/jonathan-be21/bindecy-interview.git&apos;</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Generate Maximal Number</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">copyArtifacts(projectName: &apos;test&apos;,selector: lastCompleted(), target: &quot;./&quot;)
                    def files = sh(script: &quot;ls ${savedNumbersDir}&quot;, returnStdout: true).trim().split(&quot;\n&quot;)
                    dir(savedNumbersDir) {
                        for (file in files) {
                            def currentMaxNumber = readFile(file)
                            maxNumbers.add(currentMaxNumber.trim())
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Prepare Terraform Files</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir (terraformDir) {
                        localsText = &quot;locals {\n ports_in = ${maxNumbers}\n }&quot;
                        sh &quot;echo \&quot;${localsText}\&quot; &gt; ${terraformLocalsFile}&quot;
                        sh &quot;cat ${terraformLocalsFile}&quot;
                        
                        def shellScript = &quot;#!/bin/bash -xe\n&quot;
                        sh &quot;echo \&quot;${shellScript}\&quot; &gt; ${portsListFile}&quot;

                        for (currentPort in maxNumbers) {
                            currentPort = currentPort.trim()
                            echoPort = &quot;echo -e \&quot;Port ${currentPort}\&quot; &gt;&gt; ${sshdConfigFile}\n&quot;
                            sh &quot;echo \&quot;${echoPort}\&quot; &gt;&gt; ${portsListFile}&quot;
                        }
                        sh &quot;cat ${portsListFile}&quot;
                        shellScript = &quot;sshd -t &amp;&amp; systemctl restart ssh.service&quot;
                        sh &quot;echo \&quot;${shellScript}\&quot; &gt;&gt; ${portsListFile}&quot;
                        sh &quot;cat ${portsListFile}&quot;
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
                <name>Execute Terraform</name>
                <branches>
                  <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                    <name>default</name>
                    <steps>
                      <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                        <name>script</name>
                        <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                          <arguments class="linked-hash-map">
                            <entry>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                                <key>scriptBlock</key>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTKey>
                              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                                <value class="string">dir (terraformDir) {
                        try {
                            withAWS(credentials: &apos;jenkins-test-user&apos;, region: &apos;us-east-1&apos;) {
                                sh &quot;terraform init&quot;
                            }
                            
                        } catch (error) {
                            throw error
                        }
                    }</value>
                              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTValue_-ConstantValue>
                            </entry>
                          </arguments>
                        </args>
                      </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTScriptBlock>
                    </steps>
                  </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBranch>
                </branches>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStage>
            </stages>
            <uuid>a12f9536-3eec-4781-8a21-530b7a3cbda1</uuid>
          </stages>
          <postBuild>
            <conditions>
              <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
                <condition>always</condition>
                <branch>
                  <name>default</name>
                  <steps>
                    <org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                      <name>cleanWs</name>
                      <args class="org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTNamedArgumentList">
                        <arguments class="linked-hash-map"/>
                      </args>
                    </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTStep>
                  </steps>
                </branch>
              </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTBuildCondition>
            </conditions>
          </postBuild>
          <agent>
            <agentType>
              <key>any</key>
            </agentType>
          </agent>
        </org.jenkinsci.plugins.pipeline.modeldefinition.ast.ModelASTPipelineDef>
      </pipelineDefs>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.ExecutionModelAction>
    <hudson.plugins.git.util.BuildData plugin="git@5.2.0">
      <buildsByBranchName>
        <entry>
          <string>refs/remotes/origin/wip</string>
          <hudson.plugins.git.util.Build>
            <marked plugin="git-client@4.4.0">
              <sha1>e9be273f41c0db67aac2bc8c94bd96d83d15fee1</sha1>
              <branches class="list">
                <hudson.plugins.git.Branch>
                  <sha1 reference="../../../sha1"/>
                  <name>refs/remotes/origin/wip</name>
                </hudson.plugins.git.Branch>
              </branches>
            </marked>
            <revision reference="../marked"/>
            <hudsonBuildNumber>1</hudsonBuildNumber>
          </hudson.plugins.git.util.Build>
        </entry>
      </buildsByBranchName>
      <lastBuild reference="../buildsByBranchName/entry/hudson.plugins.git.util.Build"/>
      <remoteUrls>
        <string>https://github.com/jonathan-be21/bindecy-interview.git</string>
      </remoteUrls>
    </hudson.plugins.git.util.BuildData>
    <org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState plugin="workflow-scm-step@415.v434365564324">
      <revisionStates>
        <entry>
          <string>git https://github.com/jonathan-be21/bindecy-interview.git</string>
          <hudson.scm.SCMRevisionState_-None/>
        </entry>
      </revisionStates>
    </org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState>
  </actions>
  <queueId>58</queueId>
  <timestamp>1693081147169</timestamp>
  <startTime>1693081147175</startTime>
  <result>FAILURE</result>
  <duration>12999</duration>
  <charset>UTF-8</charset>
  <keepLog>false</keepLog>
  <execution class="org.jenkinsci.plugins.workflow.cps.CpsFlowExecution">
    <result>FAILURE</result>
    <script>def savedNumbersDir = &apos;saved-numbers&apos;
def terraformDir = &apos;terraform&apos;
def terraformLocalsFile = &apos;locals.tf&apos;
def portsListFile = &apos;ports-list&apos;
def sshdConfigFile = &apos;/etc/ssh/sshd_config&apos;
def maxNumbers = []
pipeline {
    agent any
    stages {
        stage(&apos;git&apos;) {
            steps {
                script {
                    git branch: &apos;wip&apos;, url: &apos;https://github.com/jonathan-be21/bindecy-interview.git&apos;
                }
            }
        }
        stage(&apos;Generate Maximal Number&apos;) {
            steps {
                script {
                    copyArtifacts(projectName: &apos;test&apos;,selector: lastCompleted(), target: &quot;./&quot;)
                    def files = sh(script: &quot;ls ${savedNumbersDir}&quot;, returnStdout: true).trim().split(&quot;\n&quot;)
                    dir(savedNumbersDir) {
                        for (file in files) {
                            def currentMaxNumber = readFile(file)
                            maxNumbers.add(currentMaxNumber.trim())
                        }
                    }
                }
            }
        }
        stage(&apos;Prepare Terraform Files&apos;) {
            steps {
                script {
                    dir (terraformDir) {
                        localsText = &quot;locals {\n ports_in = ${maxNumbers}\n }&quot;
                        sh &quot;echo \&quot;${localsText}\&quot; &gt; ${terraformLocalsFile}&quot;
                        sh &quot;cat ${terraformLocalsFile}&quot;
                        
                        def shellScript = &quot;#!/bin/bash -xe\n&quot;
                        sh &quot;echo \&quot;${shellScript}\&quot; &gt; ${portsListFile}&quot;

                        for (currentPort in maxNumbers) {
                            currentPort = currentPort.trim()
                            echoPort = &quot;echo -e \&quot;Port ${currentPort}\&quot; &gt;&gt; ${sshdConfigFile}\n&quot;
                            sh &quot;echo \&quot;${echoPort}\&quot; &gt;&gt; ${portsListFile}&quot;
                        }
                        sh &quot;cat ${portsListFile}&quot;
                        shellScript = &quot;sshd -t &amp;&amp; systemctl restart ssh.service&quot;
                        sh &quot;echo \&quot;${shellScript}\&quot; &gt;&gt; ${portsListFile}&quot;
                        sh &quot;cat ${portsListFile}&quot;
                    }
                }
            }
        }
        stage(&apos;Execute Terraform&apos;) {
            steps {
                script {
                    dir (terraformDir) {
                        try {
                            withAWS(credentials: &apos;jenkins-test-user&apos;, region: &apos;us-east-1&apos;) {
                                sh &quot;terraform init&quot;
                            }
                            
                        } catch (error) {
                            throw error
                        }
                    }
                }
            }
        }
    }
    post { 
        always { 
            cleanWs()
        }
    }
}</script>
    <loadedScripts class="map"/>
    <durabilityHint>MAX_SURVIVABILITY</durabilityHint>
    <timings class="map">
      <entry>
        <string>flowNode</string>
        <long>575627604</long>
      </entry>
      <entry>
        <string>classLoad</string>
        <long>680427690</long>
      </entry>
      <entry>
        <string>run</string>
        <long>2491651070</long>
      </entry>
      <entry>
        <string>parse</string>
        <long>350641182</long>
      </entry>
      <entry>
        <string>saveProgram</string>
        <long>755904887</long>
      </entry>
    </timings>
    <internalCalls class="sorted-set">
      <string>hudson.model.Result.fromString</string>
      <string>org.jenkinsci.plugins.pipeline.StageStatus.TAG_NAME</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.SyntheticStageNames.postBuild</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.createStepsBlock</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.getRestartedStage</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.logToTaskListener</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.markStageFailedAndContinued</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.markStageWithTag</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.updateJobProperties</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.Utils.updateRunAndJobActions</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.getScript</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.hasScmContext</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.isDoCheckout</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.agent.impl.Any.reuseRootAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.getDeclarativeAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.hasAgent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.populateMap</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Agent.rawClosure</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.BuildCondition.getCombinedResult</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.BuildCondition.orderedConditionNames</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.PostBuild.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.PostBuild.closureForSatisfiedCondition</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.agent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.astUUID</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.environment</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.getEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.hasSatisfiedConditions</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.libraries</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.options</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.parameters</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.post</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.tools</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Root.triggers</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.SkippedStageReason$Failure.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.SkippedStageReason$Failure.message</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.SkippedStageReason$Failure.stageStatus</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.agent</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.environment</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.getEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.getMatrixCellEnvVars</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.input</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.name</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.options</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.parallel</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.post</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.steps</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.tools</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stage.when</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stages.&lt;init&gt;</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.Stages.stages</string>
      <string>org.jenkinsci.plugins.pipeline.modeldefinition.model.StepsBlock.closure</string>
      <string>org.jenkinsci.plugins.workflow.cps.persistence.IteratorHack$Itr.hasNext</string>
      <string>org.jenkinsci.plugins.workflow.cps.persistence.IteratorHack$Itr.next</string>
      <string>org.jenkinsci.plugins.workflow.job.WorkflowRun.result</string>
      <string>org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper.currentResult</string>
      <string>org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper.rawBuild</string>
      <string>org.jenkinsci.plugins.workflow.support.steps.build.RunWrapper.result</string>
    </internalCalls>
    <sandbox>false</sandbox>
    <iota>38</iota>
    <head>1:38</head>
    <done>true</done>
    <resumeBlocked>false</resumeBlocked>
  </execution>
  <completed>true</completed>
  <checkouts class="hudson.util.PersistedList">
    <org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
      <scm class="hudson.plugins.git.GitSCM" plugin="git@5.2.0">
        <configVersion>2</configVersion>
        <userRemoteConfigs>
          <hudson.plugins.git.UserRemoteConfig>
            <url>https://github.com/jonathan-be21/bindecy-interview.git</url>
          </hudson.plugins.git.UserRemoteConfig>
        </userRemoteConfigs>
        <branches class="singleton-list">
          <hudson.plugins.git.BranchSpec>
            <name>*/wip</name>
          </hudson.plugins.git.BranchSpec>
        </branches>
        <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
        <submoduleCfg class="empty-list"/>
        <extensions>
          <hudson.plugins.git.extensions.impl.LocalBranch>
            <localBranch>wip</localBranch>
          </hudson.plugins.git.extensions.impl.LocalBranch>
        </extensions>
      </scm>
      <node></node>
      <workspace>/var/jenkins_home/workspace/pipelineB</workspace>
      <changelogFile>/var/jenkins_home/jobs/pipelineB/builds/1/changelog8637168748555322504.xml</changelogFile>
      <pollingBaseline class="hudson.scm.SCMRevisionState$None" reference="../../../actions/org.jenkinsci.plugins.workflow.steps.scm.MultiSCMRevisionState/revisionStates/entry/hudson.scm.SCMRevisionState_-None"/>
    </org.jenkinsci.plugins.workflow.job.WorkflowRun_-SCMCheckout>
  </checkouts>
</flow-build>