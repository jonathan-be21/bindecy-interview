<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1339.v7ede8a_29ed06">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2144.v077a_d1928a_40">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3769.v8b_e595e4d40d">
    <script>// define values for running in parallel
def minParallelExec = 10
def randNumbers = []
def savedNumbersDir = &apos;saved-numbers&apos;

pipeline {
    agent any
    stages {
        stage(&apos;Generate Maximal Number&apos;) {
            steps {
                script {
                    for (int i = 0; i &lt; 3; i++) {
                        node(&quot;docker-agent&quot;) {
                            stage(&apos;test&apos;) {
                                randomNumber = Math.abs( new Random().nextInt() % (50000 - 2000) ) + 2000
                                randNumbers &lt;&lt; randomNumber
                            }
                        }
                    }
                }
            }
        }
        stage(&apos;Save Maximal Number&apos;) {
            steps {
                script {
                    println(&quot;randNumbers: ${randNumbers}&quot;)
                    def maximalNumber = randNumbers.max()
                    println(&quot;max number: ${maximalNumber}&quot;)
                    sh &quot;mkdir -p ${savedNumbersDir}&quot;
                    try {
                        copyArtifacts(projectName: &apos;test&apos;,selector: lastSuccessful(), target: savedNumbersDir)
                    } catch (Exception e) {
                        println(&quot;Error coping artifacts&quot;)
                    }
                    sh &quot;echo ${maximalNumber} &gt; ${savedNumbersDir}/maximalNumber-${currentBuild.number}.txt&quot;
                    archiveArtifacts artifacts: &quot;${savedNumbersDir}/*.txt&quot;, fingerprint: true, onlyIfSuccessful: true
                }
            }
        }
    }
}</script>
    <sandbox>false</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>